import os

for directory in ['genome', 'genome/hisat', 'trim', 'logs', 'logs/trim', 'logs/trim_report', 'align', 'logs/align', 'junctions', 'logs/junctions', 'summary', 'features']:
	if not os.path.isdir(directory):
		os.mkdir(directory)

strains = ['WT', 'ts102B12', 'ts103E16'] 
replicates = ['A', 'B', 'C']

genome_release_date = '2020-10-01'

rule all:
	input:
		'summary/junction_counts.txt',
		'summary/feature_counts.txt',
		'genome/introns.bed'

##################
# Prepare Genome #
##################
rule download_genome:
	output:
		'genome/genome_%s.fa.gz' % (genome_release_date)
	threads: 1
	shell:
		'wget -q -O genome/genome_%s.fa.gz ftp://ftp.pombase.org/pombe/releases/pombase-%s/fasta/chromosomes/Schizosaccharomyces_pombe_all_chromosomes.fa.gz' % (genome_release_date, genome_release_date)

rule unzip_genome:
	input:
		'genome/genome_%s.fa.gz' % (genome_release_date)
	output:
		'genome/genome_%s.fa' % (genome_release_date)
	threads: 1
	shell:
		'gunzip {input}'

rule download_annotation:
	output:
		'genome/annotation_%s.gff3' % (genome_release_date)
	threads: 1
	shell:
		'wget -q -O genome/annotation_%s.gff3 ftp://ftp.pombase.org/pombe/releases/pombase-%s/gff/Schizosaccharomyces_pombe_all_chromosomes.gff3' % (genome_release_date, genome_release_date)

rule prepare_annotations:
	input:
		feature = 'genome/annotation_%s.gff3' % (genome_release_date),
		target = 'resources/mpe_subset.txt'
	output:
		genes = 'genome/genes.bed',
		exons = 'genome/exons.bed',
		introns = 'genome/introns.bed',
		target_introns = 'genome/target_introns.bed'
	threads: 1
	shell:
		'python scripts/prepare_annotations.py --feature {input.feature} --targets {input.target} --genes {output.genes} --alias genome/alias.txt --exons {output.exons} --introns {output.introns} --target_introns {output.target_introns}'

rule prepare_hisat_ss:
	input:
		exon = 'genome/exons.bed',
		intron = 'genome/introns.bed'
	output:
		exon = 'genome/hisat/hisat_exons.txt',
		ss = 'genome/hisat/hisat_ss.txt'
	threads: 1
	shell:
		'python scripts/prepare_hisat.py {input.exon} {input.intron} {output.exon} {output.ss}' 

rule build_hisat_index:
	input:
		genome = 'genome/genome_%s.fa' % (genome_release_date),
		exon = 'genome/hisat/hisat_exons.txt',
		ss = 'genome/hisat/hisat_ss.txt'
	output:
		expand('genome/hisat/index.{number}.ht2', number=[1,2,3,4,5,6,7,8])
	threads: 1
	shell:
		'hisat2-build -q --ss {input.ss} --exon {input.exon} {input.genome} genome/hisat/index'

################### 
# Data Processing #
###################
rule trim:
	input:
		R1='fastq/{strain}_{replicate}_R1.fastq.gz',
		R2='fastq/{strain}_{replicate}_R2.fastq.gz'
	output:
		R1='trim/{strain}_{replicate}_R1.fastq.gz',
		R2='trim/{strain}_{replicate}_R2.fastq.gz',
		html='logs/trim_report/{strain}_{replicate}.html',
		json='logs/trim_report/{strain}_{replicate}.json'
	threads: 1
	log:
		'logs/trim/{strain}_{replicate}.log'
	params:
		'-w 1 --umi --umi_loc=read1 --umi_len=10 --adapter_sequence CTGTCTCTTATACACATCT --adapter_sequence_r2 CTGTCTCTTATACACATCT'
	shell:
		'fastp {params} -i {input.R1} -I {input.R2} -o {output.R1} -O {output.R2} --html {output.html} --json {output.json} 2> {log}'

rule align:
	input:
		expand('genome/hisat/index.{number}.ht2', number=[1,2,3,4,5,6,7,8]),
		R1='trim/{strain}_{replicate}_R1.fastq.gz',
		R2='trim/{strain}_{replicate}_R2.fastq.gz'
	output:
		bam = 'align/{strain}_{replicate}.bam'
	threads: 2
	log:
		'logs/align/{strain}_{replicate}.log'
	params:
		'--new-summary --max-intronlen 2000 --no-unal --rna-strandness RF -x genome/hisat/index'
	shell:
		'hisat2 -p {threads} {params} -1 {input.R1} -2 {input.R2} 2> {log} | samtools view -bh -q 5 | samtools sort -o {output.bam}'

rule index_alignment:
	input:
		'align/{strain}_{replicate}.bam'
	output:
		'align/{strain}_{replicate}.bam.bai'
	threads: 1
	shell:
		'samtools index {input}'

rule junction_count:
	input:
		alignment = 'align/{strain}_{replicate}.bam',
		index = 'align/{strain}_{replicate}.bam.bai',
		genes = 'genome/genes.bed',
		exons = 'genome/exons.bed'
	output:
		'junctions/{strain}_{replicate}.txt'
	log:
		'logs/junctions/{strain}_{replicate}.log'
	threads: 1
	shell:
		'python3 scripts/count_junctions.py --alignment {input.alignment} --genes {input.genes} --exons {input.exons} --output {output} 2> {log}'

rule combine_junction_counts:
	input:
		expand('junctions/{strain}_{replicate}.txt', strain=strains, replicate=replicates)
	output:
		'summary/junction_counts.txt'
	threads: 1
	shell:
		'python3 scripts/combine.py --directory junctions/ --output {output}'

rule feature_counts:
	input:
		alignment = 'align/{strain}_{replicate}.bam',
		index = 'align/{strain}_{replicate}.bam.bai',
		introns = 'genome/target_introns.bed'
	output:
		'features/{strain}_{replicate}.txt'
	threads: 1
	shell:
		'python3 scripts/feature_count.py --alignment {input.alignment} --introns {input.introns} --output {output}'

rule combine_feature_count:
	input:
		expand('features/{strain}_{replicate}.txt', strain=strains, replicate=replicates)
	output:
		'summary/feature_counts.txt'
	threads: 1
	shell:
		'python scripts/combine_features.py --directory features/ --output {output}' 
